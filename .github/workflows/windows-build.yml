name: Windows build

on:
  pull_request:
  push:
    paths-ignore:
      - '.github/workflows/android-build.yml'
      - '.github/workflows/coverage.yml'
      - '.github/workflows/ios-build.yml'
      - '.github/workflows/linux-build.yml'
      - '.github/workflows/macos-build.yml'
      - '.github/workflows/msys2-build.yml'
      - '.github/workflows/wasm-build.yml'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'README.md'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest]
        arch: [x86, x64]
        config:
        - { kind: "static", mode: "debug",   runtime: "MDd" }
        - { kind: "static", mode: "debug",   runtime: "MTd" }
        - { kind: "static", mode: "release", runtime: "MD" }
        - { kind: "static", mode: "release", runtime: "MT" }
        - { kind: "shared", mode: "debug",   runtime: "MDd" }
        - { kind: "shared", mode: "release", runtime: "MD" }

    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}

    steps:
    - name: Get current date as package key
      id: cache_key
      run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Avoid line ending issues on Windows
      run: git config --global core.autocrlf false

    - name: Checkout repository
      uses: actions/checkout@v4

    # Force xmake to a specific folder (for cache)
    - name: Set xmake env
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # Install xmake
    - name: Setup xmake
      uses: xmake-io/github-action-setup-xmake@v1
      
    # Update xmake repository (in order to have the file that will be cached)
    - name: Update xmake repository
      run: xmake repo --update

    # Fetch xmake dephash
    - name: Retrieve dependencies hash
      id: dephash
      run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT
      shell: bash

    # Cache xmake dependencies
    - name: Retrieve cached xmake dependencies
      id: restore-depcache
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}\.xmake\packages
        key: MSVC-${{ matrix.arch }}-${{ matrix.config.mode }}-${{ matrix.config.runtime }}-${{ steps.dephash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

    # Setup compilation mode and install project dependencies
    - name: Configure xmake and install dependencies
      run: xmake config --arch=${{ matrix.arch }} --kind=${{ matrix.config.kind }} --mode=${{ matrix.config.mode }} --vs_runtime=${{ matrix.config.runtime }} --ccache=n --examples=y --tests=y --unitybuild=y --yes

    # Save dependencies
    - name: Save cached xmake dependencies
      if: ${{ !steps.restore-depcache.outputs.cache-hit }}
      uses: actions/cache/save@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

    # Build library and tests
    - name: Build library
      run: xmake

    # Run unit tests
    - name: Run unit tests
      run: xmake run UnitTests

    # Install the result files
    - name: Install NZSL
      run: xmake install -vo package

    # Upload artifacts
    - uses: actions/upload-artifact@v4
      with:
        name: nzsl-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.config.kind }}-${{ matrix.config.mode }}-${{ matrix.config.runtime }}
        path: package
