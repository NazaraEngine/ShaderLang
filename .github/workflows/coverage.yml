name: Coverage

on:
  pull_request:
  push:
    paths-ignore:
      - '.github/workflows/android-build.yml'
      - '.github/workflows/ios-build.yml'
      - '.github/workflows/linux-build.yml'
      - '.github/workflows/macos-build.yml'
      - '.github/workflows/msys2-build.yml'
      - '.github/workflows/wasm-build.yml'
      - '.github/workflows/windows-build.yml'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'README.md'

jobs:
  build:
    strategy:
      matrix:
        config:
        - { name: "Windows", os: windows-latest, arch: x64 }
        - { name: "Ubuntu", os: ubuntu-latest, arch: x86_64 }

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}

    steps:
    - name: Get current date as package key
      id: cache_key
      run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Checkout repository
      uses: actions/checkout@v4

    # Install system dependencies
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install gcovr mesa-common-dev

    - name: Install OpenCppCoverage (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y OpenCppCoverage

    # Force xmake to a specific folder (for cache)
    - name: Set xmake env (Linux)
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV
      shell: bash

    # Install xmake
    - name: Setup xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

    # Update xmake repository (in order to have the file that will be cached)
    - name: Update xmake repository
      run: xmake repo --update

    # Fetch xmake dephash
    - name: Retrieve dependencies hash
      id: dephash
      run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT
      shell: bash

    # Cache xmake dependencies
    - name: Retrieve cached xmake dependencies
      id: restore-depcache
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: ${{ matrix.config.name}}-${{ matrix.config.arch }}-coverage-${{ steps.dephash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

    # Setup compilation mode and install project dependencies
    - name: Configure xmake and install dependencies
      run: xmake config --arch=${{ matrix.config.arch }} --ccache=n --tests=y --unitybuild=y --kind=shared --mode=coverage --yes

    # Save dependencies
    - name: Save cached xmake dependencies
      if: ${{ !steps.restore-depcache.outputs.cache-hit }}
      uses: actions/cache/save@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

    # Build library and tests
    - name: Build library
      run: xmake

    # Run unit tests to generate coverage reports
    - name: Run unit tests and generate coverage output (Linux)
      if: runner.os == 'Linux'
      run: |
        xmake run UnitTests
        gcovr -b -x coverage.out -s -f 'include/NZSL/.*' -f 'src/NZSL/.*' -e 'src/NZSL/SpirV/SpirvData.cpp' build/.objs/

    - name: Run unit tests and generate coverage output (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" --export_type cobertura:coverage.out --sources "ShaderLang\include\NZSL\*" --sources "ShaderLang\src\NZSL\*" --excluded_sources "ShaderLang\src\NZSL\SpirV\SpirvData.cpp" --modules "ShaderLang\bin\*" --cover_children -- xmake run UnitTests

    - name: Upload Coverage Report to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

